# -*- coding: utf-8 -*-
"""Weather_Forecasting_Neural_ Prophet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OJnMIJPugVBEL-CwFStySkZGHvoPh_mv

#Install and Import Dependencies
"""

!pip install neuralprophet

!pip install --force-reinstall torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
!pip install --upgrade --force-reinstall neuralprophet

import warnings
import logging
import pandas as pd
from neuralprophet import NeuralProphet
import matplotlib.pyplot as plt
import pickle

warnings.filterwarnings("ignore")
logging.getLogger('NP').setLevel(logging.WARNING)

"""#Data Preprocessing

"""

df = pd.read_csv('/content/sample_data/weatherAUS.csv')
df.head()

df.Location.unique()

df.columns

df.dtypes

melb = df[df['Location']=='Melbourne']
melb['Date'] = pd.to_datetime(melb['Date'])
melb.head()

melb.dtypes

plt.plot(melb['Date'], melb['Temp3pm'])
plt.show()

melb['Year'] = melb['Date'].apply(lambda x: x.year)
melb = melb[melb['Year']<=2015]
plt.plot(melb['Date'], melb['Temp3pm'])
plt.show()

data = melb[['Date', 'Temp3pm']]
data.dropna(inplace=True)
data.columns = ['ds', 'y']
data.head()

"""#Model Training"""

m = NeuralProphet()
m.fit(data, freq='D', epochs=1000)

"""#Forecasting

"""

future = m.make_future_dataframe(data, periods=1200)
forecast = m.predict(future)
forecast.head()

forecast.tail()

plot1 = m.plot(forecast)
plot1.show()

plt.figure(figsize=(10, 6))

plt.plot(data['ds'], data['y'], label='Actual Data', color='blue')

plt.plot(forecast['ds'], forecast['yhat1'], label='Forecast', color='orange')

plt.xlabel('Date')
plt.ylabel('Temperature (3pm)')
plt.title('Forecast of 3pm Temperature in Melbourne')
plt.legend()
plt.grid(True)
plt.show()

"""# Save the Model

"""

with open('forecast_model.pkl', 'wb') as f:
  pickle.dump(m, f)

del m

with open('forecast_model.pkl', 'rb') as f:
  m = pickle.load(f)

m

future = m.make_future_dataframe(data, periods=12000)
forecast = m.predict(future)
forecast.head()

plot1 = m.plot(forecast)
plot1.show()